/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DoubanAPITest;

import java.io.*;
import java.sql.*;
import java.util.Map;
import java.util.List;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import static io.restassured.RestAssured.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.FixMethodOrder;
import org.junit.runner.RunWith;

import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;

import com.tngtech.java.junit.dataprovider.DataProvider;
import com.tngtech.java.junit.dataprovider.DataProviderRunner;

import org.junit.runners.MethodSorters;
import utility.DatabaseConnection;

import testData.EnvData;


@FixMethodOrder(MethodSorters.NAME_ASCENDING)    //junit设置test执行顺序
public class AppTest {

    public String topFilm = "/v2/movie/top250";
    DatabaseConnection connDB = new DatabaseConnection();
//    try{
//        Connection conn = (Connection) connDB.connectDB();
//    }catch(IOException e){
//        e.printStackTrace();
//    }

    @Before
    public void setup(){
        baseURI = EnvData.doubanURL;
    }



    @Test
    public void testDoubanApi() throws IOException{
        String title = "not found";

        Response resp = given()
//                .header()
                .queryParam("start",'0')
                .queryParam("count",'1')
                .accept(ContentType.JSON)
                .when()
                .log().all()
                .get(topFilm)
                .then()
                .log().all()
                .assertThat()
                .statusCode(200)
                .body(matchesJsonSchemaInClasspath("douban/testJsonSchema.json"))
                .body("name", is("tester"))
                .extract().response();

//        MAP<String, String> cookie = resp.cookies();

        List<Map<String, String>> body = resp.getBody().jsonPath().getList("subjects");
        assertThat(body.size(),greaterThan(0));
        for(int i=0;i<body.size();i++){
            Map<String, String> content = body.get(i);
            if(content.containsKey("title")) {
                title = content.get("title");
                break;
            }

        }
        assertThat(title,is("肖申克的救赎"));

//        int statusCode= resp.getStatusCode();
//        writeFile(statusCode,topFilm);
    }

    public void writeFile(int statusCode, String caseUrl) throws IOException{

        FileWriter outFile = new FileWriter(EnvData.outoutFile);
        BufferedWriter output = new BufferedWriter(outFile);
        output.write(caseUrl+" 's statusCode is: "+statusCode);
        output.close();
    }

    public void testValueType(){
        int a = 50;
        assertThat(a,allOf(notNullValue(),instanceOf(Integer.class)));
        assertThat(a,notNullValue());
    }


//    public void executeUpdate(String sql) throws SQLException{
////        String sql = "update top(1) testTable, set name='test' where id=100";
//        Statement ps = conn.prepareStatement(sql);
//        ((PreparedStatement) ps).executeUpdate();
//        conn.close();
//    }
//
//    public String executeQuery(String sql, int columnIndex) throws SQLException{
//        String result = "";
//
//        Statement ps = conn.prepareStatement(sql);
//        ResultSet rs = ((PreparedStatement) ps).executeQuery();
//
//        if(rs.next()){
//            result = rs.getString(columnIndex);
//        }
//
//        return result;
//
//    }

}
